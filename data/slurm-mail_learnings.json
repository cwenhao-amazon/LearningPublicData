[
  {
    "type": "tech_choices",
    "summary": "# Tech Choices Summary\n\nThis repository is primarily a Python-based tool that integrates with Slurm, a workload manager for Linux clusters. The project is structured as a command-line interface (CLI) application with a focus on testing and continuous integration. It's designed to be packaged and distributed across various Linux distributions.\n\n## Programming Languages\n\n- **Python**: The core language used throughout the project\n- Files include standard Python project structure with `setup.py`, `pyproject.toml`, and source code in the `src/slurmmail/` directory\n\n## Backend Technologies\n\n- **Slurm**: The project is built to integrate with Slurm, a workload manager for Linux clusters\n- Contains specific files like `slurm.py` and configuration files like `slurm-mail.conf`\n- Includes a `supported_slurm_versions.json` file to track compatibility\n\n## Infrastructure & Deployment\n\n- **Docker**: Used for containerization, particularly for testing across multiple Linux distributions\n- **RPM & DEB packages**: Build scripts and templates for creating packages for different Linux distributions\n- Supports multiple Linux distributions:\n  - Enterprise Linux (EL7, EL8, EL9)\n  - Ubuntu (20.04, 22.04)\n  - OpenSUSE 15\n\n## Testing Frameworks\n\n- **pytest**: Used for unit testing\n- Contains standard pytest structure with `conftest.py` for shared fixtures\n- Includes both unit tests and integration tests\n\n## Build Systems\n\n- **setuptools**: Used for building and packaging the Python project\n- Configured through `setup.py` and `pyproject.toml`\n\n## Package Management\n\n- **pip**: Used for Python package management\n- Project is structured to be distributed as a pip package\n\n## CI/CD Tools\n\n- **GitHub Actions**: Extensive use for continuous integration and delivery\n- Multiple workflows for:\n  - Code quality (pylint, mypy)\n  - Test coverage\n  - Testing and releases\n  - Docker image management\n  - Version compatibility checking\n\n## Version Control Systems\n\n- **Git**: Used for version control\n- Standard Git configuration with `.gitignore` file",
    "data": null
  },
  {
    "type": "team_preferences",
    "summary": "# Team Preferences Summary\n\nThis summary outlines the working style and organizational approach of the SlurmMail project team, based on repository analysis.\n\n## Code Organization\n\nThe project follows a standard Python package structure with src layout:\n- Source code in `src/slurmmail/` directory\n- Tests separated into `tests/unit/` and `tests/integration/` directories\n\nThis modern Python project structure helps avoid import issues during development and clearly separates production code from test code.\n\n## Version Control Workflows\n\nThe team employs GitHub Actions CI/CD workflow with path-based triggers for testing and building packages across multiple platforms:\n\n- Triggers on pull requests and pushes, but only when specific paths are modified (Python source files, templates, etc.)\n- Includes multiple jobs:\n  - Running unit tests across a matrix of Python versions\n  - Generating code coverage reports\n  - Building tar files\n  - Creating packages for multiple Linux distributions (RHEL 7/8/9, SUSE 15, Ubuntu 20.04/22.04)\n- Uses artifacts to share build outputs between jobs\n\nThis comprehensive workflow ensures code quality and compatibility across different environments.\n\n## Coding Style Guidelines\n\n### Python Coding Style Guidelines\n\n#### General Guidelines\n- Maximum line length: 120 characters (more permissive than PEP 8 standard)\n- Follow PEP 8 with modifications as specified by pylint and mypy configurations\n- Type annotations are required (enforced by mypy)\n\n#### Naming Conventions\n- Use snake_case for variables, functions, and modules\n- Use PascalCase for classes\n- Use UPPER_CASE for constants\n\n#### Code Quality\n- Avoid duplicate code\n- Avoid self-use issues in class methods (except in Python 3.6)\n- Follow type safety practices with mypy\n\nThe team uses multiple static analysis tools:\n- pylint for general code quality and style enforcement\n- mypy for type checking\n\n## Code Review Standards\n\nThe project follows a single owner review model with @neilmunday as the primary reviewer:\n- The CODEOWNERS file designates @neilmunday as the owner of all files\n- GitHub automatically requests reviews from this user for all pull requests\n- This suggests a centralized review process where one person has oversight of all changes\n\n## Testing Philosophy\n\nThe team embraces comprehensive testing with unit and integration tests:\n- Clear separation between unit and integration tests\n- GitHub Actions workflow for coverage\n- Focus on test coverage at different levels of the application\n\nThis approach ensures both individual components and their interactions are thoroughly tested.\n\n## Issue Style Guidelines\n\nThe team uses structured bug reports:\n- A standardized bug report template is provided in `.github/ISSUE_TEMPLATE/bug_report.md`\n- This ensures consistent information gathering for issue reporting\n\n## Commit Message Style Guidelines\n\nThere are no enforced commit message standards:\n- The repository only contains a sample commit-msg hook file which is not active\n- No customized or activated hooks to enforce particular commit message formats",
    "data": null
  },
  {
    "type": "non_functional_specs",
    "summary": "# Non-functional Specifications Summary\n\n## Logging Requirements\n\nThe project implements log rotation for application logs, as evidenced by the presence of a logrotate configuration file for slurm-mail.\n\nThis approach helps manage log file sizes and ensures proper retention of log data, which is important for system maintenance and troubleshooting.",
    "data": null
  }
]