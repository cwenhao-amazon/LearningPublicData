[
  {
    "type": "tech_choices",
    "summary": "# Tech Stack Summary\n\nThis project is a Go-based application with Vue.js frontends for both client and server components. It appears to be a networking tool that implements custom RPC communication between client and server components, with web dashboards for management. The project uses Docker for containerization and follows modern development practices with comprehensive testing and CI/CD pipelines.\n\n## Programming Languages\n\n- **Go**: The primary language used for the backend implementation\n- Used throughout the codebase with standard Go project structure\n- Evidenced by go.mod file and .go source files\n\n## Frontend Frameworks\n\n- **Vue.js**: Used for web interfaces\n- Implemented in both client (frpc) and server (frps) components\n- Found in web/frpc and web/frps directories with typical Vue files (App.vue, main.js)\n\n## Backend Technologies\n\n- **Go standard library with custom server implementation**\n- Custom server and client implementations rather than using a third-party framework\n- Core functionality in server/service.go, server/control.go, client/service.go, etc.\n\n## API Design Patterns\n\n- **REST API**: Used for dashboard functionality\n- **WebSockets**: Implemented for real-time communication\n- **Custom RPC**: Built for client-server communication\n- Evidenced in server/dashboard_api.go, pkg/util/net/websocket.go, and pkg/msg/msg.go\n\n## Infrastructure & Deployment\n\n- **Docker**: Used for containerization\n- Separate Dockerfiles for client (frpc) and server (frps) components\n- Located in dockerfiles/Dockerfile-for-frpc and dockerfiles/Dockerfile-for-frps\n\n## Testing Frameworks\n\n- **Go testing package**: Standard Go testing for unit tests\n- **Ginkgo**: Used for end-to-end testing\n- Testing structure visible in test/e2e/e2e_test.go and test/e2e/framework/ginkgowrapper\n\n## Build Systems\n\n- **Make**: Used for building Go components\n- **Webpack**: Used for building Vue.js frontend applications\n- Evidenced by Makefile, Makefile.cross-compiles, and webpack.config.js files\n\n## Package Management\n\n- **Go Modules**: For managing Go dependencies\n- **Yarn**: For managing JavaScript dependencies\n- Shown by go.mod, go.sum, and yarn.lock files\n\n## CI/CD Tools\n\n- **GoReleaser**: Used for building and releasing Go applications\n- Configured in .goreleaser.yml\n\n## Authentication/Security\n\n- **TLS**: Implemented for secure communication\n- **OIDC**: OpenID Connect integration for authentication\n- **Token-based authentication**: Custom implementation\n- Found in pkg/auth directory and TLS configuration files\n\n## Version Control Systems\n\n- **Git**: Used for version control\n- Standard Git configuration with .gitignore file",
    "data": null
  },
  {
    "type": "team_preferences",
    "summary": "# Team Preferences Summary\n\nThis summary outlines the working style and organizational approach of the FRP project team based on repository analysis. The team follows standard Go project conventions with a strong emphasis on code quality and consistent formatting.\n\n## Code Organization\n\nThe project follows a standard Go project layout with clear separation of concerns:\n\n- `cmd/` directory for executables\n- `pkg/` for shared packages\n- Separate `server/` and `client/` directories for those specific components\n\nThis organization reflects Go best practices and makes the codebase more navigable and maintainable.\n\n## Version Control Workflows\n\nThe team uses Git hooks to enforce quality standards in the version control process:\n\n- **Pre-push hook**: Prevents pushing commits with messages starting with \"WIP\" (work in progress)\n- **Pre-commit hook**: Prevents committing files with non-ASCII filenames to maintain cross-platform compatibility and checks for whitespace errors\n\nThese hooks (when activated by removing the .sample extension) help maintain repository cleanliness and prevent common issues.\n\n## Coding Style Guidelines\n\nThe team has comprehensive coding style guidelines enforced through golangci-lint configuration:\n\n### Naming Conventions\n- camelCase for variable and function names\n- PascalCase for exported functions, types, and variables\n- snake_case for file names\n- ALL_CAPS with underscores for constants\n\n### Formatting and Structure\n- Line length: Maximum 160 characters\n- Indentation: Tabs (counted as 1 character)\n- Uses gofumpt for consistent formatting\n- Uses goimports for import organization\n- Uses gci for import sections ordering:\n  1. Standard library imports\n  2. Default/third-party imports\n  3. Project imports (prefixed with github.com/fatedier/frp/)\n\n### Code Organization\n- Functions should be focused and reasonably sized\n- Related functionality grouped in packages\n- Test files use _test.go suffix\n- Tests placed in the same package as the code they test\n\n### Error Handling\n- Always check error returns (enforced by errcheck)\n- Don't use blank identifier for errors in critical paths\n- Don't use type assertions without checking\n\n### Comments and Documentation\n- Document all exported functions, types, and variables\n- Use complete sentences with proper punctuation\n- Use American English spelling (enforced by misspell)\n\nThe team's emphasis on these guidelines demonstrates a commitment to code quality and maintainability.\n\n## Testing Philosophy\n\nThe team employs a comprehensive testing strategy that includes:\n\n- **Unit tests**: Individual component testing (with _test.go suffix files throughout the codebase)\n- **End-to-end tests**: Integration testing via a dedicated framework in the test/e2e directory\n\nThis multi-layered approach ensures both component correctness and proper system integration, reflecting a thorough testing philosophy.",
    "data": null
  },
  {
    "type": "non_functional_specs",
    "summary": "# Non-functional Specifications Summary\n\nThis document summarizes the identified non-functional specifications for the project based on repository analysis.\n\n## Performance Requirements\n\nThe project implements rate limiting for bandwidth control with configurable limits, which is a key performance feature:\n\n- Uses Go's `rate.Limiter` to control throughput of read and write operations\n- Supports configurable burst sizes\n- Implements waiting between operations to maintain desired rates\n- Provides context for cancellation support\n\nEnd-to-end testing confirms this functionality by:\n- Setting up proxies with specific bandwidth limits (e.g., 10KB/s)\n- Verifying transfer times match expected durations based on configured limits\n\nThis indicates that bandwidth management is a critical performance requirement for the project, allowing users to precisely control network traffic rates.\n\n## Security Standards\n\nThe project implements several security features:\n\n- **TLS Support**: Secure communication channels implemented in `pkg/util/net/tls.go` with configuration examples in `scripts/frps_tls.ini`\n- **Authentication Mechanisms**:\n  - Token-based authentication (`pkg/auth/token.go`)\n  - OIDC integration (`pkg/auth/oidc.go`)\n  - General authentication framework (`pkg/auth/auth.go`)\n\nThese implementations suggest a strong focus on security as a non-functional requirement, providing multiple options for securing communications and access control.\n\n## Logging Requirements\n\nThe project implements a custom logging solution:\n\n- Core logging utilities in `pkg/util/log/log.go`\n- Extended logging functionality in `pkg/util/xlog/xlog.go`\n- Context-aware logging in `pkg/util/xlog/ctx.go`\n\nThis custom implementation suggests specific logging requirements that couldn't be met by standard logging libraries, potentially including specialized formatting, log levels, or integration needs.\n\n## Network Requirements\n\nThe project has extensive network capabilities:\n\n- Support for various network protocols\n- Multiple proxy implementations in both server and client components\n- Network utility functions in `pkg/util/net/`\n\nThe comprehensive network support indicates that the project is designed to work across diverse network environments and protocol requirements, making network flexibility a key non-functional specification.",
    "data": null
  }
]